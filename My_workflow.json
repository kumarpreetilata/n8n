{
  "name": "My workflow",
  "nodes": [
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGroq",
      "typeVersion": 1,
      "position": [
        -140,
        -120
      ],
      "id": "db040a5d-6f26-4a0a-bad9-c6adfd6e3fe0",
      "name": "Groq Chat Model",
      "credentials": {
        "groqApi": {
          "id": "PMHBR08mnOc3af6a",
          "name": "Groq account"
        }
      }
    },
    {
      "parameters": {
        "sendTo": "prt2nov@gmail.com",
        "subject": "={{ $json.output.Category }}: {{ $json.output['Suggested Subject'] }}",
        "message": "={{ `Dear ${$('Gmail Trigger').item.json.To.split(' <')[0]},\\n\\n${$json.output.Summary.replace(/Hi Team,?\\s*/i, '')}\\n\\nThanks,\\n$json.output.Sender` }}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        260,
        -280
      ],
      "id": "5405e9a2-b564-419c-b07d-0dd9f08c4ce5",
      "name": "Gmail",
      "webhookId": "663cf6f7-6393-4476-9b00-552859b30c56",
      "credentials": {
        "gmailOAuth2": {
          "id": "BlqXawZJOc4wJHb6",
          "name": "Gmail account 2"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are an advanced email classifier and summarizer. Analyze the following email and respond strictly in the provided JSON format. Do not include any extra text or explanations outside of the JSON.\n\nTasks:\n1. Categorize the email as either \"Urgent\", \"Follow Up\", or \"General\". Provide only the category name in the \"Category\" field.\n2. Extract and display the sender's email in the \"Sender\" field and sender's name in the \"Sender_Name\" field.\n3. Extract and display the full email body. If the body is over 500 words, provide a concise summary instead in the \"Summary\" field.\n4. Analyze the subject. If it is unclear or inappropriate, generate a more suitable subject and display it in the \"Suggested Subject\" field.\n\n**Email Details:**\n- Sender: {{ $('Gmail Trigger').item.json.text }}\n- Subject: {{$json[\"subject\"]}}\n- Body: {{ $('Gmail Trigger').item.json.text }}\n\n**Respond strictly in the following JSON format:**\n```json\n{\n  \"Category\": \"Your category here\",\n  \"Sender\": \"Extracted sender email\",\n  \"Sender_Name\": \"Extracted sender name\",\n  \"Summary\": \"Email summary if long, else full body\",\n  \"Suggested Subject\": \"New subject if applicable, else original\"\n}\n",
        "hasOutputParser": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        -140,
        -280
      ],
      "id": "2638fd7e-3e77-4303-9a10-979f95042f79",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "simple": false,
        "filters": {},
        "options": {}
      },
      "type": "n8n-nodes-base.gmailTrigger",
      "typeVersion": 1.2,
      "position": [
        -560,
        -420
      ],
      "id": "e5b67a27-9597-4fd2-b2b9-2a1f962ddd86",
      "name": "Gmail Trigger",
      "credentials": {
        "gmailOAuth2": {
          "id": "BlqXawZJOc4wJHb6",
          "name": "Gmail account 2"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "7817490e-5c47-4616-821d-0c5f37ee960b",
              "leftValue": "={{ $json.text }}\n",
              "rightValue": "=schedule|meeting|appointment|call|reschedule|availability|time slot|book a time|set up a time\n",
              "operator": {
                "type": "string",
                "operation": "notRegex"
              }
            },
            {
              "id": "eecbefa3-82bd-49c5-81b0-4b30824b0910",
              "leftValue": "={{ $json.headers.subject }}",
              "rightValue": "schedule|meeting|appointment|call|calendar|reschedule|availability|time slot|book a time|set up a time",
              "operator": {
                "type": "string",
                "operation": "notRegex"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -360,
        -420
      ],
      "id": "0fec7b7a-8d96-48dc-9f51-622f97d31e77",
      "name": "If",
      "alwaysOutputData": false,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are a smart meeting assistant. Analyze the following email and extract details for scheduling, rescheduling, or canceling a meeting. Provide the output as a JSON object with the following fields:\n- action: (Schedule, Reschedule, Cancel)\n- sender: (Extract sender's name from {{ $('Gmail Trigger').item.json.text }})\n- sender_email: (Extract sender's email id from {{ $json.headers.from }})\n- receiver: (Extract receiver's name from {{ $('Gmail Trigger').item.json.text }})\n- category: (Urgent, General, Medium)\n- date: (Extract date from {{ $('Gmail Trigger').item.json.text }} and convert into dd/mm/yy)\n- start_time: (Extract time from {{ $('Gmail Trigger').item.json.text }})\n- meeting_duration: (Extract duration from {{ $('Gmail Trigger').item.json.text }}, else \"1hr\" as default)\n- end_time: (start time+ meeting duration)\n- timezone: (Extract timezone if mentioned, else \"IST\" as default)\n- previous_meeting_action: (Cancel if rescheduling or canceling, else null)\n- subject: (Extract reason from  {{ $('Gmail Trigger').item.json.text }})\nEmail Content:\n{{ $('Gmail Trigger').item.json.text }}\n\nRespond only with the JSON object.\n",
        "hasOutputParser": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        -140,
        -540
      ],
      "id": "3b8ef732-b0c0-46bc-a683-fc4503886bb1",
      "name": "AI Agent1"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGroq",
      "typeVersion": 1,
      "position": [
        -140,
        -400
      ],
      "id": "8d4c9464-1a97-4707-a529-3b64c61ba25f",
      "name": "Groq Chat Model1",
      "credentials": {
        "groqApi": {
          "id": "PMHBR08mnOc3af6a",
          "name": "Groq account"
        }
      }
    },
    {
      "parameters": {
        "calendar": {
          "__rl": true,
          "value": "prt2nov@gmail.com",
          "mode": "list",
          "cachedResultName": "prt2nov@gmail.com"
        },
        "start": "={{ $json.isoDateTimeUTC }}",
        "end": "={{ $json.isoDateTimeUTC_end }}",
        "useDefaultReminders": "={{ true }}",
        "additionalFields": {
          "attendees": [
            "={{ $json.sender_email }}"
          ],
          "description": "={{ $json.subject }}"
        }
      },
      "type": "n8n-nodes-base.googleCalendar",
      "typeVersion": 1.3,
      "position": [
        500,
        -540
      ],
      "id": "afcb6f71-2554-433e-9449-212dae765d82",
      "name": "Google Calendar",
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "zg3pePNKVMmtRuSo",
          "name": "Google Calendar account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Check if $json is defined and log its content for debugging\nif (typeof $json === \"undefined\") {\n    return [\n        {\n            json: {\n                error: \"$json is not defined\"\n            }\n        }\n    ];\n}\nconsole.log(\"Raw $json:\", $json);\n\n// Safely extract outputString\nconst outputString = typeof $json.output !== \"undefined\" ? $json.output : null;\nconsole.log(\"Raw outputString:\", outputString);\n\n// Handle missing outputString\nif (!outputString) {\n    return [\n        {\n            json: {\n                error: \"Output field missing or null\"\n            }\n        }\n    ];\n}\n\n// Extract JSON part using regex\nconst jsonMatch = outputString.match(/{[\\s\\S]*}/);\nif (!jsonMatch) {\n    return [\n        {\n            json: {\n                error: \"Failed to extract JSON from outputString\",\n                rawOutput: outputString\n            }\n        }\n    ];\n}\n\nlet parsedOutput;\ntry {\n    // Parse the extracted JSON part\n    parsedOutput = JSON.parse(jsonMatch[0]);\n} catch (e) {\n    return [\n        {\n            json: {\n                error: \"Failed to parse extracted JSON\",\n                details: e.message,\n                rawExtractedJSON: jsonMatch[0]\n            }\n        }\n    ];\n}\n\n// Extract fields from parsed output\nconst action = parsedOutput.action || \"Unknown\";\nconst sender = parsedOutput.sender || \"Unknown\";\nconst sender_email = parsedOutput.sender_email;\nconst receiver = parsedOutput.receiver || \"Unknown\";\nconst category = parsedOutput.category || \"General\";\nconst previousMeetingAction = parsedOutput.previous_meeting_action || null;\nconst subject = parsedOutput.subject || \"No Subject\";\nconst dateStr = parsedOutput.date || null;\nconst starttimeStr = parsedOutput.start_time || null;\nconst endtimeStr = parsedOutput.end_time || null;\nconst timezone = parsedOutput.timezone || \"IST\";\n\n// Handle missing date or time\nif (!dateStr || !starttimeStr) {\n    return [\n        {\n            json: {\n                action,\n                sender,\n                category,\n                previousMeetingAction,\n                subject,\n                date: dateStr,\n                starttime: starttimeStr,\n                endtime: endtimeStr,\n                timezone,\n                targetTimestamp: null,\n                isoDateTimeUTC: \"Date or time missing\"\n            }\n        }\n    ];\n}\n\n// Convert DD/MM/YY to YYYY-MM-DD\nfunction convertDateFormat(date) {\n    const [day, month, year] = date.split(\"/\");\n    const fullYear = year.length === 2 ? `20${year}` : year;  // Handle 2-digit year\n    return `${fullYear}-${month}-${day}`;\n}\n\n// Convert 12-hour time to 24-hour format\nfunction convertTo24Hour(time) {\n    const [timePart, modifier] = time.split(\" \");\n    let [hours, minutes] = timePart.split(\":\");\n    if (modifier === \"PM\" && hours !== \"12\") {\n        hours = parseInt(hours, 10) + 12;\n    } else if (modifier === \"AM\" && hours === \"12\") {\n        hours = \"00\";\n    }\n    return `${hours}:${minutes}`;\n}\n\n// Convert date and time to ISO format\nconst dateISO = convertDateFormat(dateStr);\nconst starttime24 = convertTo24Hour(starttimeStr);\nconst endtime24 = convertTo24Hour(endtimeStr);\n\n// Create Date objects and convert to ISO 8601 format with Z suffix (UTC)\nconst isoStart = new Date(`${dateISO}T${starttime24}:00+05:30`).toISOString();\nconst isoEnd = new Date(`${dateISO}T${endtime24}:00+05:30`).toISOString();\n\nconst dateObj = new Date(isoStart);\nconst unixTimestamp = Math.floor(dateObj.getTime() / 1000);\n\n// Return all extracted fields\nreturn [\n    {\n        json: {\n            action,\n            sender,\n            sender_email,\n            receiver,\n            category,\n            previousMeetingAction,\n            subject,\n            date: dateISO,\n            start_time: starttimeStr,\n            end_time: endtimeStr,\n            timezone,\n            targetTimestamp: unixTimestamp,\n            isoDateTimeUTC: isoStart,\n            isoDateTimeUTC_end: isoEnd\n        }\n    }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        260,
        -540
      ],
      "id": "843f9661-75f1-4c0a-8c57-800be5db6f86",
      "name": "Code"
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"Category\": { \"type\": \"string\" },\n    \"Sender\": { \"type\": \"string\" },\n    \"Sender_Name\": { \"type\": \"string\" },\n    \"Summary\": { \"type\": \"string\" },\n    \"Suggested Subject\": { \"type\": \"string\" }\n  }\n}\n"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        160,
        -60
      ],
      "id": "b677a076-eab0-4c0f-aed8-b673288bd1ba",
      "name": "Structured Output Parser"
    }
  ],
  "pinData": {},
  "connections": {
    "Groq Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Gmail Trigger": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Gmail": {
      "main": [
        []
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Gmail",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "AI Agent1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Groq Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent1": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Google Calendar",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "AI Agent",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "3e519910-c8b2-49a3-9277-dd9614cec61e",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "cbef91629f8b823c3bb51ee564d1aef0bc5a0bfc1436730565ffa6fea7ff774d"
  },
  "id": "dD8dO5sl1EpbkSkh",
  "tags": []
}